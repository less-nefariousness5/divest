"""
Constants and configuration for PS SimC Parser
"""
from typing import Dict, Any

# Supported specializations
SUPPORTED_SPECS = {
    'vengeance': {
        'class': 'demonhunter',
        'role': 'tank',
        'resource': 'fury',
        'power_type': 'fury',
        'valid_actions': {
            'immolation_aura',
            'fel_devastation',
            'sigil_of_flame',
            'spirit_bomb',
            'soul_cleave',
            'fracture',
            'shear',
            'throw_glaive',
            'demon_spikes',
            'metamorphosis',
            'fiery_brand',
            'bulk_extraction',
            'felblade',
        }
    },
    # Add more specs as needed
}

# SimC to PS operator mappings
OPERATOR_MAPPINGS: Dict[str, str] = {
    '=': '==',
    '!=': '~=',  # Lua not equals
    '&': 'and',
    '|': 'or',
    '!': 'not',
    '>': '>',
    '<': '<',
    '>=': '>=',
    '<=': '<=',
    '+': '+',
    '-': '-',
    '*': '*',
    '/': '/',
    '%': '%',
}

# Type conversion rules
TYPE_CONVERSIONS = {
    'number': lambda x: float(x),
    'string': lambda x: f'"{x}"',
    'boolean': lambda x: str(x).lower(),
    'time': lambda x: float(x),
    'percent': lambda x: float(x) / 100,
}

# Error messages
ERROR_MESSAGES = {
    'unsupported_spec': 'Unsupported specialization: {}',
    'invalid_simc': 'Invalid SimC syntax: {}',
    'missing_mapping': 'Missing API mapping for: {}',
    'parse_error': 'Error parsing line: {}',
    'file_error': 'Error reading/writing file: {}',
    'invalid_action': 'Invalid action for spec: {}',
    'invalid_condition': 'Invalid condition: {}',
    'missing_spell': 'Missing spell mapping: {}',
}

# SimC keywords and concepts
KEYWORDS = {
    # Action types
    'actions',
    'variable',
    'call_action_list',
    'run_action_list',
    'use_item',
    'potion',
    'cancel_buff',
    'cancel_action',
    
    # Conditions
    'if',
    'target',
    'player',
    'spell_targets',
    'active_enemies',
    'buff',
    'debuff',
    'cooldown',
    'charges',
    'full_recharge_time',
    'cast_time',
    'execute_time',
    'gcd',
    
    # Resources
    'fury',
    'energy',
    'mana',
    'rage',
    'runic_power',
    'soul_fragments',
    
    # Time and combat
    'time',
    'time_to_die',
    'fight_remains',
    'remains',
    'duration',
    'tick_time',
}

# PS API constants
PS_CONSTANTS = {
    # Resource limits
    'MAX_FURY': 120,
    'MAX_ENERGY': 100,
    'MAX_MANA': 100,
    'MAX_RAGE': 100,
    'MAX_RUNIC_POWER': 100,
    'MAX_SOUL_FRAGMENTS': 5,
    
    # Combat timing
    'GCD': 1.5,
    'MIN_GCD': 0.75,
    'MAX_COMBAT_TIME': 3600,
    
    # Targeting
    'MAX_TARGETS': 20,
    'MAX_RANGE': 40,
}

# Lua code templates
LUA_TEMPLATES = {
    'header': '''-- Generated by PS SimC Parser
-- {timestamp}

local PS = ...
local Spell = PS.Spell
local Player = PS.Player
local Target = Player.Target
local Enemies = Player.Enemies
local Unit = PS.Unit
local Item = PS.Item
local MultiUnits = PS.MultiUnits
''',
    'rotation': '''local Rotation = {{
    Name = "{name}",
    Profile = "{profile}",
    Class = "{class}",
    Spec = "{spec}",
    Role = "{role}",
}}

{body}

return Rotation
''',
    'function': '''function {name}()
    {body}
end''',
    'variable': 'local {name} = {value}',
}

# Common SimC expressions and their PS equivalents
COMMON_EXPRESSIONS = {
    'target.time_to_die': 'Target.TimeToDie',
    'target.health.pct': 'Target.HealthPercent',
    'player.health.pct': 'Player.HealthPercent',
    'spell_targets': 'Enemies.Count',
    'active_enemies': 'Enemies.Count',
    'gcd.max': 'Player.GCD',
    'time': 'Combat:GetTime()',
}

# Add debug levels
DEBUG_LEVELS = {
    'OFF': 0,
    'ERROR': 1,
    'WARN': 2,
    'INFO': 3,
    'DEBUG': 4,
    'TRACE': 5,
}

# Add performance monitoring
PERFORMANCE_METRICS = {
    'spell_lookup_time': True,
    'condition_check_time': True,
    'expression_eval_time': True,
    'cache_hit_rate': True,
}

# Add API compatibility flags
API_COMPATIBILITY = {
    'strict_mode': True,
    'allow_unknown_spells': False,
    'allow_unknown_resources': False,
    'validate_mappings': True,
}
