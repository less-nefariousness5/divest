-- Generated by PS SimC Parser
local PS = ...
local Spell = PS.Spell
local Player = PS.Player
local Target = Player.Target
local Enemies = Player.Enemies
local Position = PS.Position
local Cache = {}

-- Initialize cache
function Cache:Get(key, default)
    return self[key] or default
end

function Cache:Set(key, value)
    self[key] = value
end

local Rotation = {
    Name = "Movement",
    Profile = "VDH-Movement",
    Class = "demonhunter",
    Spec = "vengeance",
    Role = "tank",
    Cache = Cache,
}

function Rotation:Execute()
    -- Check if we have a valid target
    if not Target:Exists() or Target:IsDead() then
        return
    end
    
    -- Update variables
    Cache:Set("needs_reposition",
        Target:Distance() > 8 or
        Position:InAvoidZone()
    )
    Cache:Set("can_charge",
        Target:Distance() > 10 and
        Target:Distance() < 30
    )
    Cache:Set("safe_position",
        not Position:InVoidZone() and
        not Position:InFrontalCone()
    )
    
    -- Movement abilities
    if Spell.InfernalStrike:IsReady() and Cache:Get("needs_reposition") and Position:HasSafeLocation() then
        return Cast(Spell.InfernalStrike)
    end
    
    if Spell.Felblade:IsReady() and Cache:Get("can_charge") then
        return Cast(Spell.Felblade)
    end
    
    if Spell.ThrowGlaive:IsReady() and Target:Distance() > 8 and not Cache:Get("can_charge") then
        return Cast(Spell.ThrowGlaive)
    end
    
    -- Position-based actions
    if Spell.SigilOfFlame:IsReady() and Cache:Get("safe_position") then
        return Cast(Spell.SigilOfFlame)
    end
    
    if Spell.FelDevastation:IsReady() and Target:Distance() <= 8 and Cache:Get("safe_position") then
        return Cast(Spell.FelDevastation)
    end
end

return Rotation 