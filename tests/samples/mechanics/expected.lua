-- Generated by PS SimC Parser
local PS = ...
local Spell = PS.Spell
local Player = PS.Player
local Target = Player.Target
local Enemies = Player.Enemies
local Mechanics = PS.Mechanics
local Cache = {}

-- Initialize cache
function Cache:Get(key, default)
    return self[key] or default
end

function Cache:Set(key, value)
    self[key] = value
end

local Rotation = {
    Name = "Mechanics",
    Profile = "VDH-Mechanics",
    Class = "demonhunter",
    Spec = "vengeance",
    Role = "tank",
    Cache = Cache,
}

function Rotation:Execute()
    -- Check if we have a valid target
    if not Target:Exists() or Target:IsDead() then
        return
    end
    
    -- Update variables
    Cache:Set("mechanic_active", 
        Mechanics:MovementRequired() or 
        Mechanics:DodgeRequired() or 
        Mechanics:ImmunityRequired()
    )
    Cache:Set("safe_to_attack",
        not Mechanics:FrontalActive() and
        not Mechanics:VoidZoneActive()
    )
    
    -- Handle mechanics
    if Spell.Metamorphosis:IsReady() and Mechanics:ImmunityRequired() then
        return Cast(Spell.Metamorphosis)
    end
    
    if Spell.InfernalStrike:IsReady() and Mechanics:MovementRequired() and Target:Distance() > 10 then
        return Cast(Spell.InfernalStrike)
    end
    
    if Spell.DemonSpikes:IsReady() and Mechanics:PhysicalDamageIncoming() then
        return Cast(Spell.DemonSpikes)
    end
    
    if Spell.EmpowerWards:IsReady() and Mechanics:MagicDamageIncoming() then
        return Cast(Spell.EmpowerWards)
    end
    
    -- Normal rotation when safe
    if Cache:Get("safe_to_attack") then
        if Spell.ImmolationAura:IsReady() then
            return Cast(Spell.ImmolationAura)
        end
        
        if Spell.SpiritBomb:IsReady() and Player.SoulFragments >= 4 then
            return Cast(Spell.SpiritBomb)
        end
    end
end

return Rotation 